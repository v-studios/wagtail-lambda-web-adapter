# May want a Lambda that JUST does migrations, collectstatic, using same image

service: wagtail

provider:
  #runtime: python3.11           # DO PER FUNCTION
  name: aws
  region: eu-west-3
  memorySize: 2048 # optional, in MB, default is 1024
  #timeout: 30 # Django database migration may take > 6 seconds
  timeout: 60 # Janitor collect static (or are we hanging on S3 perms)
  ecr:
    images:
      wagtaillambda:
        path: ./
        platform: linux/amd64   # my Mac M1 builds ARM by default,
  # Let Lambda save media, statics to S3
  iam:
    role:
      #name: whatever
      #path: /                   # what's this?
      statements:
        - Effect: Allow
          Action:
            - 's3:Get*'       # media and assets
            - 's3:PutObject*' # store uploaded media
            - 's3:PutObjectAcl*' # TODO trying to make upload form AJAX POST work
            - 's3:*'             # TODO remove me
          Resource: !Sub ${S3Media.Arn}
        - Effect: Allow
          Action:
            - 's3:*'             # TODO remove me
          Resource: !Sub ${S3Media.Arn}/
        - Effect: Allow
          Action:
            - 's3:*'             # TODO remove me
          Resource: "*"

  # Put Lambda in the VPC with needed for Aurora;
  # TODO can we use a VPC Endpoint instead?
  vpc:
    securityGroupIds:
      - !Ref SecurityGroupAppRunner
    subnetIds:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2

functions:
  s3check:
    environment: 
      AWS_STORAGE_BUCKET_NAME: !Ref S3Media # Bucket name, not DNS
    handler:
      s3check.handler
    runtime: python3.11

  wagtail:
    environment: 
      # TODO make these vars parameters or refs to DB outputs
      DATABASE_URL: !Sub "postgres://wagtail:ChangeMe@${Database.Endpoint.Address}:${Database.Endpoint.Port}/wagtaillambda"
      # On Lambda, only /tmp is writable
      # DATABASE_URL: sqlite:////tmp/wagtail-env.sqlite
      AWS_STORAGE_BUCKET_NAME: !Ref S3Media # Bucket name, not DNS
    image:
      name: wagtaillambda
    url: true                   # create a Lambda Function URL 

  wagtailjanitor:
    environment: 
      DATABASE_URL: !Sub "postgres://wagtail:ChangeMe@${Database.Endpoint.Address}:${Database.Endpoint.Port}/wagtaillambda"
      AWS_STORAGE_BUCKET_NAME: !Ref S3Media
      WAGTAIL_JANITOR: migrate and collect static
    image:
      name: wagtaillambda
    url: false                   # run from CLI or web console, not API

# VPC, Aurora Serverless v1 DB, S3 Media 

resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.192.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: 10.192.10.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: 10.192.11.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName} Public Routes
    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
    SecurityGroupAppRunner:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Sub "${AWS::StackName}-apprunner-sg"
        GroupDescription: "Security group marking the apprunner instance"
        VpcId: !Ref VPC
    SecurityGroupDb:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Sub "${AWS::StackName}-db-sg"
        GroupDescription: "Security group on DB allowing apprunner access"
        SecurityGroupIngress:
          - IpProtocol: tcp
            SourceSecurityGroupId: !GetAtt SecurityGroupAppRunner.GroupId
            FromPort: 5432
            ToPort: 5432
        VpcId: !Ref VPC

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet for Database
        DBSubnetGroupName: !Sub "${AWS::StackName}-db-subnet-group"
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
    Database:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineMode: serverless             # only use Serverless v1 at this time
        EngineVersion: 13.9                # Django 4.1+ requires PSQL 12+; Serverless v1 only up to 13.9
        DatabaseName:        wagtaillambda
        DBClusterIdentifier: wagtaillambda
        DBSubnetGroupName:   !Ref DBSubnetGroup
        MasterUsername:      wagtail
        MasterUserPassword:  ChangeMe
        ScalingConfiguration:
          AutoPause: true
          MaxCapacity: 4
          MinCapacity: 2          # minimum for Serverless v1
          SecondsUntilAutoPause: 300
        VpcSecurityGroupIds:
          - !Ref SecurityGroupDb
  

    S3Media:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      # UpdateReplacePolicy: Retain
      Properties:
        # BucketName generated like: wagtail-dev-s3media-12vbehqv6osgh
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            ExposedHeaders: [Date]
            MaxAge: '300'
        PublicAccessBlockConfiguration: # needed to set acl=public-read
          BlockPublicAcls: false
        OwnershipControls:        # needed if we want to set acl=public-read
          Rules:
            - ObjectOwnership: ObjectWriter
        # LifecycleConfiguration:
        #   Rules:
        #     - Id: ExpireOldVersions
        #       Status: Enabled
        #       NoncurrentVersionExpirationInDays: 100
        # VersioningConfiguration:
        #   Status: Enabled
    # Serverless created VPCEndpoint type=Interface: wagtail-dev but
    # we need this VPCE type=Gateway so Lambda in VPC can reach S3.
    S3VpcEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        RouteTableIds:
          - !Ref PublicRouteTable
        ServiceName: com.amazonaws.${self:provider.region}.s3
        VpcId: !Ref VPC
        

