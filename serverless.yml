# May want a Lambda that JUST does migrations, collectstatic, using same image

service: wagtail

provider:
  name: aws
  region: eu-west-3
  memorySize: 2048 # optional, in MB, default is 1024
  timeout: 30 # Django database migration may take > 6 seconds
  ecr:
    images:
      wagtaillambda:
        path: ./
        platform: linux/amd64   # my Mac M1 builds ARM by default, Lambda needs AMD

# increase memory, time

functions:
  wagtail:
    environment: 
      # On Lambda, only /tmp is writable
      DATABASE_URL: sqlite:////tmp/wagtail-env.sqlite
    image:
      name: wagtaillambda
    url: true                   # create a Lambda Function URL 

# VPC, ...

resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.192.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: 10.192.10.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: 10.192.11.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName} Public Routes
    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
    SecurityGroupAppRunner:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Sub "${AWS::StackName}-apprunner-sg"
        GroupDescription: "Security group marking the apprunner instance"
        VpcId: !Ref VPC
    SecurityGroupDb:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Sub "${AWS::StackName}-db-sg"
        GroupDescription: "Security group on DB allowing apprunner access"
        SecurityGroupIngress:
          - IpProtocol: tcp
            SourceSecurityGroupId: !GetAtt SecurityGroupAppRunner.GroupId
            FromPort: 5432
            ToPort: 5432
        VpcId: !Ref VPC

